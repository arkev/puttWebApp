extends ../layout

block head
  link(rel='stylesheet' href='https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.css')

block content
  .auth
    .card-auth
      .header.form-header
        a.close(href="/you" aria-label="Cerrar")
          i.fa-solid.fa-xmark
        h1 Editar perfil
      if error
        .auth-error #{error}
      form(method="post" action="/you/edit" enctype="multipart/form-data")
        .group
          label(for="username") Usuario
          input(type="text" id="username" name="username" required value=form && form.username)
        .group
          label(for="email") Email
          input(type="email" id="email" name="email" required value=form && form.email)
        .group
          label(for="password") Nueva contraseña (opcional)
          input(type="password" id="password" name="password" minlength="6" placeholder="Dejar vacía para no cambiar")
        .group
          label(for="confirm") Confirmar nueva contraseña
          input(type="password" id="confirm" name="confirm" minlength="6")
        .checklist
          .item(data-rule="len") Mínimo 6 caracteres
          .item(data-rule="upper") Al menos 1 mayúscula
          .item(data-rule="num") Al menos 1 número
        .group
          label(for="avatar") Avatar (opcional)
          input(type="file" id="avatar" name="avatar" accept="image/*")
          #avatarCropContainer.crop-container
            .crop-header Ajustar
            .crop-area
              img#avatarCropImage
            .crop-actions
              button(type='button' id='avatarCropCancel') Cancelar
              button(type='button' id='avatarCropSave') Guardar
        if avatar
          .meta Imagen actual:
          img.avatar(src=`/images/${avatar}` alt="avatar")
        .actions
          button.btn(type="submit" id="btnSave" disabled) Guardar cambios
      // Cerrar sesión
      .actions
        a.btn.btn-danger(href="/logout")
          i.fa-solid.fa-right-from-bracket
          |  Cerrar sesión

block scripts
  script(src='https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.js')
  script.
    (function(){
      var pwd = document.getElementById('password');
      var confirm = document.getElementById('confirm');
      var btn = document.getElementById('btnSave');
      function validate(){
        var v = pwd.value || '';
        if(!v){ btn.disabled = false; mark('len', false); mark('upper', false); mark('num', false); return; }
        var okLen = v.length >= 6;
        var okUpper = /[A-Z]/.test(v);
        var okNum = /\d/.test(v);
        var okConfirm = confirm.value && (confirm.value === v);
        mark('len', okLen); mark('upper', okUpper); mark('num', okNum);
        btn.disabled = !(okLen && okUpper && okNum && okConfirm);
      }
      function mark(rule, ok){
        var el = document.querySelector('.checklist .item[data-rule="'+rule+'"]');
        if(!el) return; el.classList.toggle('ok', !!ok);
      }
      ['input','keyup','change'].forEach(ev=>{ pwd.addEventListener(ev, validate); confirm.addEventListener(ev, validate); });
      validate();
    })();
  script.
    (function(){
      var input = document.getElementById('avatar');
      var container = document.getElementById('avatarCropContainer');
      var img = document.getElementById('avatarCropImage');
      var cancel = document.getElementById('avatarCropCancel');
      var save = document.getElementById('avatarCropSave');
      var cropper;
      if(!input) return;
      input.addEventListener('change', function(e){
        var file = e.target.files && e.target.files[0];
        if(!file) return;
        var reader = new FileReader();
        reader.onload = function(){
          img.src = reader.result;
          container.classList.add('show');
          cropper = new Cropper(img, { aspectRatio: 1, viewMode: 1 });
        };
        reader.readAsDataURL(file);
      });
      cancel && cancel.addEventListener('click', function(){
        container.classList.remove('show');
        if(cropper){ cropper.destroy(); cropper = null; }
        input.value = '';
      });
      save && save.addEventListener('click', function(){
        if(!cropper) return;
        var canvas = cropper.getCroppedCanvas({ width: 400, height: 400 });
        canvas.toBlob(function(blob){
          var orig = input.files && input.files[0];
          var name = (orig && orig.name) || 'avatar.png';
          var type = (orig && orig.type) || 'image/png';
          var file = new File([blob], name, { type: type });
          var dt = new DataTransfer();
          dt.items.add(file);
          input.files = dt.files;
          container.classList.remove('show');
          cropper.destroy();
          cropper = null;
        }, (input.files && input.files[0] && input.files[0].type) || 'image/png');
      });
    })();
